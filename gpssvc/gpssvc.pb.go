// Code generated by protoc-gen-go.
// source: gpssvc.proto
// DO NOT EDIT!

/*
Package gpssvc is a generated protocol buffer package.

It is generated from these files:
	gpssvc.proto

It has these top-level messages:
	Position
*/
package gpssvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Position struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// true track when available
	Heading float64 `protobuf:"fixed64,3,opt,name=heading" json:"heading,omitempty"`
	// speed in km/h, ground speed when available
	Speed               float64 `protobuf:"fixed64,4,opt,name=speed" json:"speed,omitempty"`
	HorizontalPrecision float64 `protobuf:"fixed64,5,opt,name=horizontal_precision,json=horizontalPrecision" json:"horizontal_precision,omitempty"`
	// matched data
	Matched          bool    `protobuf:"varint,6,opt,name=matched" json:"matched,omitempty"`
	MatchedLatitude  float64 `protobuf:"fixed64,7,opt,name=matched_latitude,json=matchedLatitude" json:"matched_latitude,omitempty"`
	MatchedLongitude float64 `protobuf:"fixed64,8,opt,name=matched_longitude,json=matchedLongitude" json:"matched_longitude,omitempty"`
	MatchedHeading   float64 `protobuf:"fixed64,9,opt,name=matched_heading,json=matchedHeading" json:"matched_heading,omitempty"`
	MatchedDistance  float64 `protobuf:"fixed64,10,opt,name=matched_distance,json=matchedDistance" json:"matched_distance,omitempty"`
	RoadName         string  `protobuf:"bytes,11,opt,name=road_name,json=roadName" json:"road_name,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Position) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Position) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Position) GetHeading() float64 {
	if m != nil {
		return m.Heading
	}
	return 0
}

func (m *Position) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Position) GetHorizontalPrecision() float64 {
	if m != nil {
		return m.HorizontalPrecision
	}
	return 0
}

func (m *Position) GetMatched() bool {
	if m != nil {
		return m.Matched
	}
	return false
}

func (m *Position) GetMatchedLatitude() float64 {
	if m != nil {
		return m.MatchedLatitude
	}
	return 0
}

func (m *Position) GetMatchedLongitude() float64 {
	if m != nil {
		return m.MatchedLongitude
	}
	return 0
}

func (m *Position) GetMatchedHeading() float64 {
	if m != nil {
		return m.MatchedHeading
	}
	return 0
}

func (m *Position) GetMatchedDistance() float64 {
	if m != nil {
		return m.MatchedDistance
	}
	return 0
}

func (m *Position) GetRoadName() string {
	if m != nil {
		return m.RoadName
	}
	return ""
}

func init() {
	proto.RegisterType((*Position)(nil), "Position")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GPSSVC service

type GPSSVCClient interface {
	// LivePosition streams Position updates
	LivePosition(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (GPSSVC_LivePositionClient, error)
	// InjectPosition Inject fake position
	// use it for debug purpose only
	InjectPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type gPSSVCClient struct {
	cc *grpc.ClientConn
}

func NewGPSSVCClient(cc *grpc.ClientConn) GPSSVCClient {
	return &gPSSVCClient{cc}
}

func (c *gPSSVCClient) LivePosition(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (GPSSVC_LivePositionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GPSSVC_serviceDesc.Streams[0], c.cc, "/GPSSVC/LivePosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &gPSSVCLivePositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GPSSVC_LivePositionClient interface {
	Recv() (*Position, error)
	grpc.ClientStream
}

type gPSSVCLivePositionClient struct {
	grpc.ClientStream
}

func (x *gPSSVCLivePositionClient) Recv() (*Position, error) {
	m := new(Position)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gPSSVCClient) InjectPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/GPSSVC/InjectPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GPSSVC service

type GPSSVCServer interface {
	// LivePosition streams Position updates
	LivePosition(*google_protobuf.Empty, GPSSVC_LivePositionServer) error
	// InjectPosition Inject fake position
	// use it for debug purpose only
	InjectPosition(context.Context, *Position) (*google_protobuf.Empty, error)
}

func RegisterGPSSVCServer(s *grpc.Server, srv GPSSVCServer) {
	s.RegisterService(&_GPSSVC_serviceDesc, srv)
}

func _GPSSVC_LivePosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GPSSVCServer).LivePosition(m, &gPSSVCLivePositionServer{stream})
}

type GPSSVC_LivePositionServer interface {
	Send(*Position) error
	grpc.ServerStream
}

type gPSSVCLivePositionServer struct {
	grpc.ServerStream
}

func (x *gPSSVCLivePositionServer) Send(m *Position) error {
	return x.ServerStream.SendMsg(m)
}

func _GPSSVC_InjectPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPSSVCServer).InjectPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GPSSVC/InjectPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPSSVCServer).InjectPosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

var _GPSSVC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GPSSVC",
	HandlerType: (*GPSSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectPosition",
			Handler:    _GPSSVC_InjectPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LivePosition",
			Handler:       _GPSSVC_LivePosition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gpssvc.proto",
}

func init() { proto.RegisterFile("gpssvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xdf, 0x4a, 0xfb, 0x30,
	0x14, 0xa6, 0xbf, 0xfd, 0xb6, 0xb5, 0xc7, 0x31, 0x35, 0x0e, 0x09, 0x9d, 0x17, 0xc3, 0x1b, 0x27,
	0x42, 0xa7, 0xee, 0x11, 0x54, 0x54, 0x18, 0x32, 0x36, 0xf0, 0xb6, 0x64, 0xed, 0xb1, 0x8b, 0xb4,
	0x49, 0x69, 0xb2, 0x81, 0x3e, 0x82, 0x4f, 0x2d, 0x4b, 0x9b, 0x4c, 0x2f, 0xbc, 0xcb, 0xf7, 0xe7,
	0x9c, 0x9c, 0x8f, 0x0f, 0x7a, 0x59, 0xa9, 0xd4, 0x36, 0x89, 0xca, 0x4a, 0x6a, 0x19, 0x0e, 0x33,
	0x29, 0xb3, 0x1c, 0x27, 0x06, 0xad, 0x36, 0x6f, 0x13, 0x2c, 0x4a, 0xfd, 0x51, 0x8b, 0xe7, 0x5f,
	0x2d, 0xf0, 0xe7, 0x52, 0x71, 0xcd, 0xa5, 0x20, 0x21, 0xf8, 0x39, 0xd3, 0x5c, 0x6f, 0x52, 0xa4,
	0xde, 0xc8, 0x1b, 0x7b, 0x0b, 0x87, 0xc9, 0x19, 0x04, 0xb9, 0x14, 0x59, 0x2d, 0xfe, 0x33, 0xe2,
	0x9e, 0x20, 0x14, 0xba, 0x6b, 0x64, 0x29, 0x17, 0x19, 0x6d, 0x19, 0xcd, 0x42, 0x32, 0x80, 0xb6,
	0x2a, 0x11, 0x53, 0xfa, 0xdf, 0xf0, 0x35, 0x20, 0x37, 0x30, 0x58, 0xcb, 0x8a, 0x7f, 0x4a, 0xa1,
	0x59, 0x1e, 0x97, 0x15, 0x26, 0x5c, 0x71, 0x29, 0x68, 0xdb, 0x98, 0x4e, 0xf6, 0xda, 0xdc, 0x4a,
	0xbb, 0x2f, 0x0a, 0xa6, 0x93, 0x35, 0xa6, 0xb4, 0x33, 0xf2, 0xc6, 0xfe, 0xc2, 0x42, 0x72, 0x09,
	0x47, 0xcd, 0x33, 0x76, 0xe7, 0x77, 0xcd, 0xa2, 0xc3, 0x86, 0x9f, 0xd9, 0x14, 0x57, 0x70, 0xec,
	0xac, 0x2e, 0x8d, 0x6f, 0xbc, 0x76, 0xc7, 0xcc, 0x85, 0xba, 0x00, 0x3b, 0x1f, 0xdb, 0x70, 0x81,
	0xb1, 0xf6, 0x1b, 0xfa, 0xa9, 0xc9, 0xf8, 0xe3, 0x80, 0x94, 0x2b, 0xcd, 0x44, 0x82, 0x14, 0x7e,
	0x1d, 0x70, 0xdf, 0xd0, 0x64, 0x08, 0x41, 0x25, 0x59, 0x1a, 0x0b, 0x56, 0x20, 0x3d, 0x18, 0x79,
	0xe3, 0x60, 0xe1, 0xef, 0x88, 0x17, 0x56, 0xe0, 0x6d, 0x05, 0x9d, 0xc7, 0xf9, 0x72, 0xf9, 0x7a,
	0x47, 0xa6, 0xd0, 0x9b, 0xf1, 0x2d, 0xba, 0x66, 0x4e, 0xa3, 0xba, 0xc4, 0xc8, 0x96, 0x18, 0x3d,
	0xec, 0x4a, 0x0c, 0x83, 0xc8, 0x5a, 0xae, 0x3d, 0x32, 0x85, 0xfe, 0xb3, 0x78, 0xc7, 0x44, 0xbb,
	0xb1, 0xbd, 0x1c, 0xfe, 0xb1, 0x61, 0xd5, 0x31, 0x78, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0xad, 0x06, 0x4d, 0x34, 0x02, 0x00, 0x00,
}
